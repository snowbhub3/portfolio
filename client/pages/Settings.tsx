import { useState, useEffect } from "react";
import { useTelegram } from "@/hooks/useTelegram";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { TelegramSetupModal } from "@/components/TelegramSetupModal";
import {
  BellIcon,
  FingerprintIcon,
  GlobeIcon,
  DollarSignIcon,
  CreditCardIcon,
  HelpCircleIcon,
  MessageSquareIcon,
  LightbulbIcon,
  ChevronRightIcon,
} from "lucide-react";
import { useNavigate } from "react-router-dom";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–æ–≤–∏
const getLanguageName = (languageCode?: string) => {
  const languages: Record<string, string> = {
    uk: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    ru: "–†—É—Å—Å–∫–∏–π",
    en: "English",
    de: "Deutsch",
    fr: "Fran√ßais",
    es: "Espa√±ol",
    it: "Italiano",
    pt: "Portugu√™s",
    pl: "Polski",
    tr: "T√ºrk√ße",
    ar: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
    zh: "‰∏≠Êñá",
    ja: "Êó•Êú¨Ë™û",
    ko: "ÌïúÍµ≠Ïñ¥",
  };

  return languages[languageCode || ""] || "–†—É—Å—Å–∫–∏–π";
};

export default function Settings() {
  const { tg, hapticFeedback, user } = useTelegram();
  const navigate = useNavigate();
  const [showSetupModal, setShowSetupModal] = useState(false);

  // Back button is now handled automatically by useAutoBackButton hook

  const handleItemClick = (item: any) => {
    hapticFeedback("light");

    if (item.action === "telegram-setup") {
      setShowSetupModal(true);
    } else {
      console.log(`Clicked: ${item.title}`);
    }
  };

  const handleDiagnostic = () => {
    hapticFeedback("medium");
    console.log("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Web App:");
    console.log("window.Telegram:", window.Telegram);
    console.log("tg object:", tg);
    console.log("user object:", user);

    if (tg) {
      console.log("üì± Platform:", tg.platform);
      console.log("üî¢ Version:", tg.version);
      console.log("üé® Color scheme:", tg.colorScheme);
      console.log("üìç initData:", tg.initData);
      console.log("üíæ initDataUnsafe:", tg.initDataUnsafe);

      // –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º–∏
      console.log("\nüéØ –ê–ù–ê–õ–Ü–ó –ü–†–û–ë–õ–ï–ú–ò:");
      if (!tg.initDataUnsafe?.user) {
        console.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ");

        // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö
        const isMobile = /iPhone|iPad|Android/i.test(navigator.userAgent);
        if (isMobile || tg.platform === "unknown") {
          console.log("üì± –†–Ü–®–ï–ù–ù–Ø –î–õ–Ø –ú–û–ë–Ü–õ–¨–ù–û–ì–û:");
          console.log("   1. –£ @BotFather –Ω–∞–ø–∏—à—ñ—Ç—å /newapp");
          console.log(
            "   2. –°—Ç–≤–æ—Ä—ñ—Ç—å Web App –∑ URL: https://a1c16b064f7149d9a9291176d41387b1-pulse-field.projects.builder.my/",
          );
          console.log("   3. –ü–æ—Ç—ñ–º /setmenubutton");
          console.log("   4. –í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–∏–π Web App (–ù–ï –≤–≤–æ–¥—å—Ç–µ URL)");
          console.log("   5. –í–∏–¥–∞–ª—ñ—Ç—å –±–æ—Ç–∞ –∑ —á–∞—Ç—ñ–≤ —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –∑–Ω–æ–≤—É");
          console.log("\nüîÑ –ê–ë–û –í–ò–ö–û–†–ò–°–¢–ê–ô–¢–ï INLINE –ö–ù–û–ü–ö–£:");
          console.log("   - –°—Ç–≤–æ—Ä—ñ—Ç—å –±–æ—Ç–∞ –∑ inline –∫–Ω–æ–ø–∫–æ—é");
          console.log("   - –¶–µ –ø—Ä–∞—Ü—é—î —É 100% –≤–∏–ø–∞–¥–∫—ñ–≤ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É");
        } else {
          console.log("üíª –†–Ü–®–ï–ù–ù–Ø –î–õ–Ø DESKTOP:");
          console.log("   1. –£ Telegram –≤—ñ–¥–∫—Ä–∏–π—Ç–µ @BotFather");
          console.log("   2. –ù–∞–ø–∏—à—ñ—Ç—å /setmenubutton");
          console.log("   3. –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–æ–≥–æ –±–æ—Ç–∞");
          console.log("   4. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–∞–∑–≤—É: –ö–æ—à–µ–ª—ë–∫");
          console.log(
            "   5. URL: https://a1c16b064f7149d9a9291176d41387b1-pulse-field.projects.builder.my/",
          );
        }
      } else {
        console.log("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ");
      }

      if (tg.platform === "unknown") {
        console.log("‚ö†Ô∏è Platform –Ω–µ–≤—ñ–¥–æ–º–∏–π - –º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ –Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞");
      }

      console.log("\nüîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏...");
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    } else {
      console.log("‚ùå Telegram Web App API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
    }
  };

  // –î–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ settingsItems –∑ –º–æ–≤–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const settingsItems = [
    {
      icon: <BellIcon className="w-5 h-5 text-red-500" />,
      title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      value: "",
      hasChevron: true,
    },
    {
      icon: <FingerprintIcon className="w-5 h-5 text-green-500" />,
      title: "–ö–æ–¥-–ø–∞—Ä–æ–ª—å –∏ Face ID",
      value: "–í–∫–ª",
      hasChevron: true,
    },
    {
      icon: <GlobeIcon className="w-5 h-5 text-purple-500" />,
      title: "–Ø–∑—ã–∫",
      value: getLanguageName(user?.language_code),
      hasChevron: true,
    },
    {
      icon: <DollarSignIcon className="w-5 h-5 text-gray-500" />,
      title: "–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞",
      value: "USD",
      hasChevron: true,
    },
    {
      icon: (
        <span className="w-5 h-5 text-blue-500 flex items-center justify-center">
          üì±
        </span>
      ),
      title: "Telegram —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è",
      value: "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏",
      hasChevron: true,
      action: "telegram-setup",
    },
  ];

  const walletTabs = [
    { id: "wallet", label: "–ö–æ—à–µ–ª—ë–∫", active: true },
    { id: "tonspace", label: "TON Space", error: true },
  ];

  const supportItems = [
    {
      icon: <CreditCardIcon className="w-5 h-5 text-blue-500" />,
      title: "–£—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
      value: "–ú–∞–∫—Å–∏",
      hasChevron: true,
    },
    {
      icon: <MessageSquareIcon className="w-5 h-5 text-orange-500" />,
      title: "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
      hasChevron: true,
    },
    {
      icon: <HelpCircleIcon className="w-5 h-5 text-blue-400" />,
      title: "FAQ –ö–æ—à–µ–ª—å–∫–∞",
      hasChevron: true,
    },
    {
      icon: <LightbulbIcon className="w-5 h-5 text-yellow-500" />,
      title: "–ù–æ–≤–æ—Å—Ç–∏ –ö–æ—à–µ–ª—å–∫–∞",
      hasChevron: true,
    },
  ];

  return (
    <div className="min-h-screen bg-background text-foreground">
      <div className="p-4">
        {/* User Profile Section */}
        {user && (
          <Card className="mb-6 p-4">
            <div className="flex items-center gap-4">
              {user.photo_url ? (
                <img
                  src={user.photo_url}
                  alt={`${user.first_name || "User"} avatar`}
                  className="w-16 h-16 rounded-full object-cover"
                />
              ) : (
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                  <span className="text-xl font-medium text-white">
                    {user.first_name?.[0]?.toUpperCase() || "U"}
                  </span>
                </div>
              )}
              <div className="flex-1">
                <h3 className="text-lg font-semibold">
                  {user.first_name} {user.last_name || ""}
                </h3>
                {user.username && (
                  <p className="text-sm text-muted-foreground">
                    @{user.username}
                  </p>
                )}
                <p className="text-xs text-muted-foreground">
                  Telegram ID: {user.id}
                </p>
              </div>
            </div>
          </Card>
        )}

        {/* Telegram Integration Section */}
        {(!user || user?.is_demo || !tg) && (
          <Card className="mb-6 p-4 border-blue-200 bg-blue-50">
            <div className="space-y-3">
              <div className="grid grid-cols-2 gap-3">
                <Button
                  onClick={handleDiagnostic}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                </Button>
                <Button
                  onClick={() => setShowSetupModal(true)}
                  variant="outline"
                  className="border-blue-300 text-blue-700 hover:bg-blue-100"
                >
                  üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
                </Button>
              </div>

              {user?.is_demo && (
                <div className="text-center">
                  <p className="text-sm text-blue-700 font-medium mb-2">
                    üé≠ –ó–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π Demo —Ä–µ–∂–∏–º
                  </p>
                  <p className="text-xs text-blue-600">
                    –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó" –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
                    –∑ Telegram
                  </p>
                </div>
              )}

              <p className="text-xs text-blue-600 text-center">
                –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è | –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó - –ø–æ–≤–Ω–∏–π –≥–∞–π–¥
              </p>
            </div>
          </Card>
        )}

        {/* Basic Settings */}
        <h2 className="text-lg font-semibold mb-4 text-muted-foreground">
          –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
        </h2>
        <Card className="mb-6">
          {settingsItems.map((item, index) => (
            <div
              key={index}
              className={`p-4 flex items-center justify-between cursor-pointer hover:bg-muted/50 transition-colors ${
                index !== settingsItems.length - 1
                  ? "border-b border-border"
                  : ""
              }`}
              onClick={() => handleItemClick(item)}
            >
              <div className="flex items-center gap-3">
                {item.icon}
                <span className="font-medium">{item.title}</span>
              </div>
              <div className="flex items-center gap-2">
                {item.value && (
                  <span className="text-muted-foreground">{item.value}</span>
                )}
                {item.hasChevron && (
                  <ChevronRightIcon className="w-4 h-4 text-muted-foreground" />
                )}
              </div>
            </div>
          ))}
        </Card>

        {/* Wallet Tabs */}
        <div className="flex gap-2 mb-4">
          {walletTabs.map((tab) => (
            <Button
              key={tab.id}
              variant={tab.active ? "default" : "outline"}
              className={`flex-1 relative ${tab.error ? "border-destructive" : ""}`}
              onClick={() => hapticFeedback("light")}
            >
              {tab.label}
              {tab.error && (
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full flex items-center justify-center">
                  <span className="text-destructive-foreground text-xs">!</span>
                </div>
              )}
            </Button>
          ))}
        </div>

        {/* Verification Notice */}
        <Card className="p-4 mb-6">
          <div className="flex items-center gap-3">
            <CreditCardIcon className="w-5 h-5 text-blue-500" />
            <div className="flex-1">
              <div className="flex items-center justify-between">
                <span className="font-medium">–£—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</span>
                <div className="flex items-center gap-2">
                  <span className="text-muted-foreground">–ú–∞–∫—Å–∏</span>
                  <ChevronRightIcon className="w-4 h-4 text-muted-foreground" />
                </div>
              </div>
            </div>
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç TON Space.
          </p>
        </Card>

        {/* Support Items */}
        <Card className="mb-6">
          {supportItems.slice(1).map((item, index) => (
            <div
              key={index}
              className={`p-4 flex items-center justify-between cursor-pointer hover:bg-muted/50 transition-colors ${
                index !== supportItems.slice(1).length - 1
                  ? "border-b border-border"
                  : ""
              }`}
              onClick={() => handleItemClick(item)}
            >
              <div className="flex items-center gap-3">
                {item.icon}
                <span className="font-medium">{item.title}</span>
              </div>
              <div className="flex items-center gap-2">
                {item.value && (
                  <span className="text-muted-foreground">{item.value}</span>
                )}
                {item.hasChevron && (
                  <ChevronRightIcon className="w-4 h-4 text-muted-foreground" />
                )}
              </div>
            </div>
          ))}
        </Card>

        {/* Legal Links */}
        <div className="space-y-3 mb-6">
          <Button
            variant="ghost"
            className="w-full justify-start text-primary p-0"
            onClick={() => hapticFeedback("light")}
          >
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
          </Button>
          <Button
            variant="ghost"
            className="w-full justify-start text-primary p-0"
            onClick={() => hapticFeedback("light")}
          >
            –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
          </Button>
        </div>

        {/* Footer */}
        <div className="text-center text-sm text-muted-foreground">
          <p className="mb-1">–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è TG Wallet Inc.</p>
          <p className="mb-1">–°–µ—Ä–≤–∏—Å –Ω–µ–∑–∞–≤–∏—Å–∏–º –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram.</p>
          <Button
            variant="ghost"
            className="text-primary p-0 h-auto"
            onClick={() => hapticFeedback("light")}
          >
            –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
          </Button>
        </div>
      </div>

      {/* Telegram Setup Modal */}
      <TelegramSetupModal
        isOpen={showSetupModal}
        onClose={() => setShowSetupModal(false)}
      />
    </div>
  );
}
