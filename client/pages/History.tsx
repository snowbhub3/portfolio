import { useState, useEffect } from "react";
import { useTelegram } from "@/hooks/useTelegram";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import {
  ArrowUpIcon,
  ArrowDownIcon,
  RefreshCwIcon,
  ShoppingCartIcon,
  DollarSignIcon,
  SendIcon,
  StarIcon,
  TrendingUpIcon,
  TrendingDownIcon,
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import BottomNavigation from "@/components/BottomNavigation";
import { PortfolioManager, Transaction } from "@/lib/portfolio";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
const getTransactionIcon = (type: Transaction["type"]) => {
  switch (type) {
    case "buy":
      return <ShoppingCartIcon className="w-5 h-5 text-success" />;
    case "sell":
      return <TrendingDownIcon className="w-5 h-5 text-destructive" />;
    case "deposit":
      return <StarIcon className="w-5 h-5 text-blue-500" />;
    case "withdraw":
      return <ArrowUpIcon className="w-5 h-5 text-orange-500" />;
    case "transfer_to_cfd":
      return <SendIcon className="w-5 h-5 text-purple-500" />;
    case "transfer_from_cfd":
      return <SendIcon className="w-5 h-5 text-purple-500" />;
    default:
      return <RefreshCwIcon className="w-5 h-5 text-muted-foreground" />;
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
const getTransactionColor = (type: Transaction["type"]) => {
  switch (type) {
    case "buy":
    case "deposit":
    case "transfer_from_cfd":
      return "text-success";
    case "sell":
    case "withdraw":
    case "transfer_to_cfd":
      return "text-destructive";
    default:
      return "text-muted-foreground";
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
const getTransactionTitle = (transaction: Transaction) => {
  switch (transaction.type) {
    case "buy":
      return `–ü–æ–∫—É–øÔøΩÔøΩ–∞ ${transaction.assetId?.toUpperCase() || "–∞–∫—Ç–∏–≤—É"}`;
    case "sell":
      return `–ü—Ä–æ–¥–∞–∂ ${transaction.assetId?.toUpperCase() || "–∞–∫—Ç–∏–≤—É"}`;
    case "deposit":
      return "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–≤–µ–∑–¥–∞–º–∏";
    case "withdraw":
      return "–í–∏–≤–µ–¥–µ–Ω–Ω—è —É –∑—ñ—Ä–∫–∏";
    case "transfer_to_cfd":
      return "–ü–µ—Ä–µ–∫–∞–∑ –¥–æ CFD";
    case "transfer_from_cfd":
      return "–ü–µ—Ä–µ–∫–∞–∑ –∑ CFD";
    default:
      return "–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è";
  }
};

export default function History() {
  const { user, hapticFeedback, tg } = useTelegram();
  const navigate = useNavigate();
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [portfolioManager, setPortfolioManager] =
    useState<PortfolioManager | null>(null);
  const [filter, setFilter] = useState<
    "all" | "buy" | "sell" | "deposit" | "withdraw"
  >("all");

  // Back button is now handled automatically by Telegram mini app

  useEffect(() => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑ÔøΩÔøΩ—Ü—ñ—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
    const userId = user?.id?.toString() || "demo_user";
    const portfolio = new PortfolioManager(userId);
    setPortfolioManager(portfolio);

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    setTransactions(portfolio.getTransactions());
  }, [user]);

  const filteredTransactions = transactions.filter((transaction) => {
    if (filter === "all") return true;
    return transaction.type === filter;
  });

  const formatDate = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const diffHours = diff / (1000 * 60 * 60);
    const diffDays = diff / (1000 * 60 * 60 * 24);

    if (diffHours < 1) {
      return "–©–æ–π–Ω–æ";
    } else if (diffHours < 24) {
      return `${Math.floor(diffHours)} –≥–æ–¥ —Ç–æ–º—É`;
    } else if (diffDays < 7) {
      return `${Math.floor(diffDays)} –¥–Ω —Ç–æ–º—É`;
    } else {
      return date.toLocaleDateString("uk-UA", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });
    }
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      <div className="pb-20">
        {/* Header */}
        <div className="p-4 border-b border-border">
          <h1 className="text-xl font-semibold">–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π</h1>
          <p className="text-sm text-muted-foreground">
            –í—Å—ñ –≤–∞—à—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó
          </p>
        </div>

        {/* Filters */}
        <div className="p-4 border-b border-border">
          <div className="flex gap-2 overflow-x-auto">
            {[
              { key: "all", label: "–í—Å—ñ" },
              { key: "buy", label: "–ü–æ–∫—É–ø–∫–∏" },
              { key: "sell", label: "–ü—Ä–æ–¥–∞–∂—ñ" },
              { key: "deposit", label: "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è" },
              { key: "withdraw", label: "–í–∏–≤–µ–¥–µ–Ω–Ω—è" },
            ].map((item) => (
              <Button
                key={item.key}
                variant={filter === item.key ? "default" : "outline"}
                size="sm"
                onClick={() => {
                  setFilter(item.key as any);
                  hapticFeedback("light");
                }}
                className="whitespace-nowrap"
              >
                {item.label}
              </Button>
            ))}
          </div>
        </div>

        {/* Transactions List */}
        <div className="p-4">
          {filteredTransactions.length === 0 ? (
            <Card className="p-8 text-center">
              <div className="text-4xl mb-4">üìä</div>
              <div className="font-medium mb-2">–ü–æ–∫–∏ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</div>
              <div className="text-sm text-muted-foreground mb-4">
                {filter === "all"
                  ? "–í–∞—à—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç"
                  : "–ù–µ–º–∞—î –æ–ø–µ—Ä–∞—Ü—ñ–π —Ü—å–æ–≥–æ —Ç–∏–ø—É"}
              </div>
              <Button onClick={() => navigate("/market")} variant="outline">
                –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
              </Button>
            </Card>
          ) : (
            <div className="space-y-3">
              {filteredTransactions.map((transaction) => (
                <Card key={transaction.id} className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="p-2 bg-muted rounded-full">
                        {getTransactionIcon(transaction.type)}
                      </div>
                      <div>
                        <div className="font-medium">
                          {getTransactionTitle(transaction)}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {formatDate(transaction.timestamp)}
                        </div>
                        {transaction.quantity && transaction.price && (
                          <div className="text-xs text-muted-foreground">
                            {transaction.quantity.toFixed(2)} √ó $
                            {transaction.price.toFixed(2)}
                          </div>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <div
                        className={`font-semibold ${getTransactionColor(transaction.type)}`}
                      >
                        {transaction.type === "buy" ||
                        transaction.type === "withdraw" ||
                        transaction.type === "transfer_to_cfd"
                          ? "-"
                          : "+"}
                        ${transaction.amount.toFixed(2)}
                      </div>
                      {transaction.assetId && (
                        <div className="text-xs text-muted-foreground">
                          {transaction.assetId.toUpperCase()}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å */}
                  {transaction.description && (
                    <div className="mt-2 pt-2 border-t border-border">
                      <div className="text-xs text-muted-foreground">
                        {transaction.description}
                      </div>
                    </div>
                  )}
                </Card>
              ))}
            </div>
          )}
        </div>

        {/* Summary Card */}
        {portfolioManager && (
          <div className="p-4">
            <Card className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
              <div className="text-center">
                <div className="text-sm text-muted-foreground mb-1">
                  –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                </div>
                <div className="text-2xl font-bold text-primary">
                  ${portfolioManager.getTotalPortfolioValue().toFixed(2)}
                </div>
                <div className="text-xs text-muted-foreground mt-1">
                  –ì–æ—Ç—ñ–≤–∫–∞: ${portfolioManager.getCashBalance().toFixed(2)} |
                  CFD: ${portfolioManager.getCfdBalance().toFixed(2)}
                </div>
              </div>
            </Card>
          </div>
        )}
      </div>

      <BottomNavigation />
    </div>
  );
}
