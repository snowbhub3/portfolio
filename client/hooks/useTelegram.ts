import { useEffect, useState } from "react";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É Telegram Web App –¥–∞–Ω–∏—Ö –∑ URL
const parseTelegramDataFromURL = () => {
  const urlParams = new URLSearchParams(window.location.search);
  const hashParams = new URLSearchParams(window.location.hash.substring(1));

  // –®—É–∫–∞—î–º–æ tgWebAppData —É —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö
  let tgData = urlParams.get("tgWebAppData") || hashParams.get("tgWebAppData");

  if (!tgData) {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –Ω–∞–∑–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    tgData =
      urlParams.get("tgdata") ||
      hashParams.get("tgdata") ||
      urlParams.get("initData") ||
      hashParams.get("initData");
  }

  if (tgData) {
    try {
      console.log(
        "üîç –ó–Ω–∞–π–¥–µ–Ω–æ Telegram –¥–∞–Ω—ñ –≤ URL:",
        tgData.substring(0, 50) + "...",
      );

      // –°–ø—Ä–æ–±–∞ –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ
      const decodedData = decodeURIComponent(tgData);
      const params = new URLSearchParams(decodedData);

      // –ü–∞—Ä—Å–∏–Ω–≥ user –¥–∞–Ω–∏—Ö
      const userParam = params.get("user");
      if (userParam) {
        const userData = JSON.parse(decodeURIComponent(userParam));
        console.log("‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ URL:", userData);
        return userData;
      }
    } catch (error) {
      console.warn("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Telegram –¥–∞–Ω–∏—Ö –∑ URL:", error);
    }
  }

  return null;
};

export const useTelegram = () => {
  const [webApp, setWebApp] = useState<typeof window.Telegram.WebApp | null>(
    null,
  );
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram Web App SDK...");
    console.log("window.Telegram:", window.Telegram);
    console.log("window.Telegram?.WebApp:", window?.Telegram?.WebApp);

    if (window?.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      console.log("‚úÖ Telegram WebApp –∑–Ω–∞–π–¥–µ–Ω–æ:", tg);
      console.log("üì± initData:", tg.initData);
      console.log("üîì initDataUnsafe:", tg.initDataUnsafe);
      console.log("üë§ User data:", tg.initDataUnsafe?.user);

      setWebApp(tg);
      setUser(tg.initDataUnsafe?.user);

      tg.ready();
      tg.expand();

      console.log("üöÄ Telegram Web App —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    } else {
      console.warn("‚ùå Telegram Web App SDK –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

      // –ü—Ä–æ–±—É—î–º–æ –ø–æ—á–µ–∫–∞—Ç–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑
      const checkTelegram = () => {
        if (window?.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp;
          console.log("‚úÖ Telegram WebApp –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:", tg);

          // –î–µ—Ç–∞–ª—å–Ω–∞ ÔøΩÔøΩ—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ—Ä—Å—ñ—ó
          const version = parseFloat(tg.version || "0");
          console.log("üî¢ –í–µ—Ä—Å—ñ—è Telegram:", version);

          if (version < 6.1) {
            console.warn("‚ö†Ô∏è –ó–ê–°–¢–ê–†–Ü–õ–ê –í–ï–†–°–Ü–Ø TELEGRAM!");
            console.log("üì± –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è:", version);
            console.log("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è: 6.1+");
            console.log("üö´ –û–±–º–µ–∂–µ–Ω–Ω—è:");
            console.log("   - BackButton –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
            console.log("   - HapticFeedback –æ–±–º–µ–∂–µ–Ω–∏–π");
            console.log("   - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂—É—Ç—å –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è");
            console.log("üîÑ –†–Ü–®–ï–ù–ù–Ø: –û–Ω–æ–≤—ñ—Ç—å Telegram");
          }

          // –†–æ–∑—à–∏—Ä–µ–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ
          console.log("üì± Platform:", tg.platform);
          console.log("üé® Color scheme:", tg.colorScheme);
          console.log("üìä Viewport height:", tg.viewportHeight);
          console.log("üíæ initData length:", tg.initData?.length || 0);
          console.log(
            "üîì initDataUnsafe keys:",
            Object.keys(tg.initDataUnsafe || {}),
          );
          console.log("üåê Window location:", window.location.href);
          console.log("üîó Referrer:", document.referrer);
          console.log("üìã User agent:", navigator.userAgent);

          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–æ—Å–æ–±—É –∑–∞–ø—É—Å–∫—É
          const launchMethod = (() => {
            if (window.location.search.includes("tgWebAppData"))
              return "Web App (inline button)";
            if (window.location.hash.includes("tgWebAppData"))
              return "Web App (hash)";
            if (tg.platform && tg.platform !== "unknown") return "Menu Button";
            return "Unknown/Direct";
          })();
          console.log("üöÄ –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É:", launchMethod);

          // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è iOS
          if (
            navigator.userAgent.includes("iPhone") ||
            navigator.userAgent.includes("iPad")
          ) {
            console.log("üì± iOS –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:");
            console.log(
              "   - –í–µ—Ä—Å—ñ—è iOS:",
              navigator.userAgent.match(/OS (\d+_\d+)/)?.[1],
            );
            console.log(
              "   - Telegram —á–µ—Ä–µ–∑ Safari:",
              !window.TelegramWebviewProxy,
            );
            console.log("   - Telegram native:", !!window.TelegramWebviewProxy);
          }

          setWebApp(tg);
          setUser(tg.initDataUnsafe?.user);
          tg.ready();
          tg.expand();
        }
      };

      setTimeout(checkTelegram, 1000);
      setTimeout(checkTelegram, 3000);

      // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
      setTimeout(() => {
        if (window?.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp;
          console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...");
          console.log("üë§ User data (–ø–æ–≤—Ç–æ—Ä–Ω–æ):", tg.initDataUnsafe?.user);

          if (tg.initDataUnsafe?.user && !user) {
            console.log("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ");
            setUser(tg.initDataUnsafe.user);
          } else {
            // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ URL —è–∫—â–æ API –Ω–µ –¥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log("üîç –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ URL...");
            const urlUserData = parseTelegramDataFromURL();
            if (urlUserData && !user) {
              console.log("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ URL");
              setUser(urlUserData);
            }
          }
        }
      }, 3000);

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è demo —Ä–µ–∂–∏–º—É
      setTimeout(() => {
        if (
          window?.Telegram?.WebApp &&
          !window.Telegram.WebApp.initDataUnsafe?.user
        ) {
          console.log("üé≠ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è demo —Ä–µ–∂–∏–º—É (–¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ)");
          console.log("üí° –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:");
          console.log("   1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather");
          console.log("   2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /setmenubutton");
          console.log("   3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é ÔøΩÔøΩ –±–æ—Ç—ñ");

          // Demo –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
          const demoUser = {
            id: 0,
            first_name: "Demo",
            last_name: "User",
            username: "demo_user",
            language_code: "uk",
            is_demo: true,
          };
          setUser(demoUser);
        }
      }, 5000);
    }
  }, []);

  const hapticFeedback = (type: "light" | "medium" | "heavy" = "medium") => {
    webApp?.HapticFeedback?.impactOccurred(type);
  };

  const showMainButton = (text: string, onClick: () => void) => {
    if (webApp?.MainButton) {
      webApp.MainButton.setText(text);
      webApp.MainButton.show();
      webApp.MainButton.onClick(onClick);
    }
  };

  const hideMainButton = () => {
    webApp?.MainButton?.hide();
  };

  return {
    webApp,
    user,
    hapticFeedback,
    showMainButton,
    hideMainButton,
    tg: webApp,
  };
};
